using Backend_hempromak.Models;
using System.Text.Json;

namespace Backend_hempromak.Services
{
    public class DataService
    {

        private readonly DbContext _dbContext;
        private readonly IConfiguration _configuration;

        public DataService(DbContext dbContext, IConfiguration configuration)
        {
            _dbContext = dbContext;
            _configuration = configuration;
        }

        public async Task<bool> postTransactionAsync (TransferModel transferModel)
        {
            try
            {
                var transferItemsJson = transferModel.transfer_data;
                var transferItems = JsonSerializer.Deserialize<List<TransferItem>>(transferItemsJson);
                DateTime dateTimeNow = TimeZoneInfo.ConvertTime(DateTime.Now, TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time"));
                string formattedDateTimeNow = dateTimeNow.ToString("yyyy-MM-dd HH:mm:ss");
                var query_results = _dbContext.executeSqlQuery($"INSERT INTO transactions (seriski_broj, date_created, type, from_to, vozilo_broj, ispratnica_broj) VALUES " +
                    $"('{transferModel.seriskiBroj}', '{formattedDateTimeNow}', '{transferModel.type}', '{transferModel.kupuva}', '{transferModel.voziloBroj}', '{transferModel.ispratnicaBroj}');");

                if (query_results.Count > 0)
                {
                    var id = query_results[0]["id"];
                    query_results = _dbContext.executeSqlQuery($"INSERT INTO postmeta (post_id, meta_key, meta_value)" +
                        $" VALUES ('{id}', 'seriski_broj', '{transferModel.seriskiBroj}')," +
                        $" ('{id}', 'ispratnica_broj', '{transferModel.ispratnicaBroj}')," +
                        $" ('{id}', 'kupuva', '{transferModel.kupuva}')," +
                        $" ('{id}', 'vozilo_broj', '{transferModel.voziloBroj}')," +
                        $" ('{id}', 'type', '{transferModel.type}')," +
                        $" ('{id}', 'date_created', '{formattedDateTimeNow}')," +
                        $"('{id}', 'transfer_data_json', '{transferItemsJson}');");
                }

                return true;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task<List<Dictionary<string, object>>> getAll()
        {
            var query = _dbContext.executeSqlQuery("select * from adapteri_nipli as an LEFT JOIN adapteri_nipli_details as ands ON an.sifra = ands.sifra");
            
            return query;
        }

    }
}
